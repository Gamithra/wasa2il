# -*- coding: utf-8 -*-
# Generated by Django 1.11.13 on 2018-06-06 18:17
from __future__ import unicode_literals

from django.db import migrations


# When documentcontent-less issues have been archived, we'll need to iterate
# over all the issues and give them new issue_nums and issue_years with the
# archives issues out of the way.
def reflatten_issue_nums(apps, schema_editor):
    Issue = apps.get_model('issue', 'Issue')

    issues = Issue.objects.filter(archived=False).order_by('polity__name', 'created')

    previous_polity_id = 0
    previous_year = 0
    current_issue_num = 0
    for issue in issues:
        # Reset issue number when a new year or new polity is run into.
        if issue.polity_id != previous_polity_id or issue.created.year != previous_year:
            current_issue_num = 0

        current_issue_num += 1

        issue.issue_num = current_issue_num
        issue.issue_year = issue.created.year
        issue.save()

        previous_polity_id = issue.polity_id
        previous_year = issue.created.year


def archive_issues_without_documentcontent(apps, schema_editor):
    Issue = apps.get_model('issue', 'Issue')
    Issue.objects.filter(documentcontent=None).update(archived=True, issue_num=None, issue_year=None)

    reflatten_issue_nums(apps, schema_editor)


def unarchive_issues_without_documentcontent(apps, schema_editor):
    Issue = apps.get_model('issue', 'Issue')
    Issue.objects.filter(documentcontent=None).update(archived=False)

    reflatten_issue_nums(apps, schema_editor)


class Migration(migrations.Migration):

    dependencies = [
        ('issue', '0029_auto_20180606_1817'),
    ]

    operations = [
        migrations.RunPython(
            archive_issues_without_documentcontent,
            unarchive_issues_without_documentcontent
        )
    ]
